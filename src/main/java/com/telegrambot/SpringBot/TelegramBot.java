package com.telegrambot.SpringBot;

import com.telegrambot.SpringBot.yandexgpt.model.service.YandexGptService;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.*;

@Component
public class TelegramBot extends TelegramLongPollingBot {

    private final BotConfig botConfig;
    private final YandexGptService yandexGptService;
    private final Map<Long, String> userStates = new HashMap<>();
    private static final String AWAITING_IMAGE_PROMPT = "AWAITING_IMAGE_PROMPT";
    private static final String AWAITING_ZODIAC_SIGN = "AWAITING_ZODIAC_SIGN";
    private static final String CALLBACK_NEW_QUESTION = "new_question";
    private static final String CALLBACK_GENERATE_IMAGE = "generate_image";
    private static final String CALLBACK_SETTINGS = "settings";
    private static final String CALLBACK_ASTROLOGY = "astrology";

    public TelegramBot(BotConfig botConfig, YandexGptService yandexGptService) {
        super(botConfig.getBotToken());
        this.botConfig = botConfig;
        this.yandexGptService = yandexGptService;
    }

    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            String firstName = update.getMessage().getChat().getFirstName();

            if (messageText.startsWith("/")) {
                handleCommand(messageText, chatId, firstName);
            } else {
                handleUserMessage(messageText, chatId, firstName);
            }
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery().getMessage().getChatId(),
                    update.getCallbackQuery().getData(),
                    update.getCallbackQuery().getMessage().getMessageId());
        }
    }

    private void handleCommand(String command, long chatId, String firstName) {
        switch (command) {
            case "/start":
                SendMessage welcomeMessage = new SendMessage();
                welcomeMessage.setChatId(chatId);
                welcomeMessage.setText(
                        "–ü—Ä–∏–≤–µ—Ç, " + firstName + "! –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!");
                welcomeMessage.setReplyMarkup(createInlineKeyboard());
                try {
                    execute(welcomeMessage);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
                break;
            case "/help":
                sendMessageWithInlineKeyboard(chatId,
                        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å!\n\n" +
                                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π\n" +
                                "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞\n" +
                                "‚Ä¢ /hide - —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏");
                break;
            case "/hide":
                SendMessage hideMessage = new SendMessage();
                hideMessage.setChatId(chatId);
                hideMessage.setText("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–µ–Ω—é.");
                try {
                    execute(hideMessage);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
                break;
            default:
                sendMessageWithInlineKeyboard(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.");
        }
    }

    private void handleCallbackQuery(long chatId, String callbackData, Integer messageId) {
        switch (callbackData) {
            case CALLBACK_NEW_QUESTION:
                userStates.remove(chatId);
                sendMessageWithInlineKeyboard(chatId, "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å.");
                break;
            case CALLBACK_GENERATE_IMAGE:
                userStates.put(chatId, AWAITING_IMAGE_PROMPT);
                SendMessage message = new SendMessage();
                message.setChatId(chatId);
                message.setText("–û–ø–∏—à–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å");
                try {
                    execute(message);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
                break;
            case CALLBACK_SETTINGS:
                sendMessageWithInlineKeyboard(chatId,
                        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n" +
                                "‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ GPT: 0.9\n" +
                                "‚Ä¢ –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: 2000\n" +
                                "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å: " + botConfig.getYandexModel() + "\n" +
                                "‚Ä¢ –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: " + botConfig.getYandexArtModel() + "\n\n" +
                                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");
                break;
            case CALLBACK_ASTROLOGY:
                userStates.put(chatId, AWAITING_ZODIAC_SIGN);
                SendMessage astrologyMessage = new SendMessage();
                astrologyMessage.setChatId(chatId);
                astrologyMessage.setText("‚ú® –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:\n\n" +
                        "‚Ä¢ –û–≤–µ–Ω\n‚Ä¢ –¢–µ–ª–µ—Ü\n‚Ä¢ –ë–ª–∏–∑–Ω–µ—Ü—ã\n‚Ä¢ –†–∞–∫\n‚Ä¢ –õ–µ–≤\n‚Ä¢ –î–µ–≤–∞\n" +
                        "‚Ä¢ –í–µ—Å—ã\n‚Ä¢ –°–∫–æ—Ä–ø–∏–æ–Ω\n‚Ä¢ –°—Ç—Ä–µ–ª–µ—Ü\n‚Ä¢ –ö–æ–∑–µ—Ä–æ–≥\n‚Ä¢ –í–æ–¥–æ–ª–µ–π\n‚Ä¢ –†—ã–±—ã");
                try {
                    execute(astrologyMessage);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
                break;
        }
    }

    private void handleUserMessage(String message, long chatId, String firstName) {
        String userState = userStates.getOrDefault(chatId, "");

        if (userState.equals(AWAITING_IMAGE_PROMPT)) {
            handleImageGeneration(message, chatId);
            return;
        }

        if (userState.equals(AWAITING_ZODIAC_SIGN)) {
            handleAstrologyRequest(message, chatId,  firstName);
            return;
        }

        handleRegularMessage(message, chatId);
    }

    private void handleImageGeneration(String message, long chatId) {
        String base64Response = yandexGptService.generateImage(message);

        if (base64Response != null && base64Response.contains("base64,")) {
            try {
                String base64Data = base64Response.split("base64,", 2)[1];
                byte[] imageBytes = Base64.getDecoder().decode(base64Data);
                InputStream inputStream = new ByteArrayInputStream(imageBytes);
                SendPhoto sendPhoto = new SendPhoto();
                sendPhoto.setChatId(chatId);
                sendPhoto.setPhoto(new InputFile(inputStream, "generated_image.jpg"));
                sendPhoto.setCaption("üé® –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n" + message);
                execute(sendPhoto);
                sendMessageWithInlineKeyboard(chatId,
                        "–û—Ç–ª–∏—á–Ω–æ! –û–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–∏–Ω—É, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å' –¥–ª—è –≤—ã—Ö–æ–¥–∞.");
            } catch (TelegramApiException e) {
                e.printStackTrace();
                sendMessageWithInlineKeyboard(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
            }
        } else {
            sendMessageWithInlineKeyboard(chatId,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n" +
                            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n" +
                            "‚Ä¢ –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å\n" +
                            "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API\n" +
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —Å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.");
        }
    }

    private void handleAstrologyRequest(String zodiacSign, long chatId, String firstName) {
        try {
            SendMessage typingMessage = new SendMessage();
            typingMessage.setChatId(String.valueOf(chatId));
            if (firstName.equals("–ö—Å–µ–Ω–∏—è")) {
                typingMessage.setText("üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –ø—Ä–∏ " +
                        "–ø–æ–¥–¥–µ—Ä–∂–∫–µ –í–ï–õ–ò–ö–û–ô –∏ –£–ñ–ê–°–ù–û–ô –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–Ω–∏ –í–µ–ª–∏—á–∫–æ!");

            } else {
                typingMessage.setText("üîÆ –°–æ—Å—Ç–∞–≤–ª—è—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑...");
            }
            execute(typingMessage);

            String prompt = "–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü –¥–ª—è –∑–Ω–∞–∫–∞ " + zodiacSign +
                    ". –í–∫–ª—é—á–∏ –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Å—Ñ–µ—Ä–∞—Ö: –ª—é–±–æ–≤—å, –∫–∞—Ä—å–µ—Ä–∞, –∑–¥–æ—Ä–æ–≤—å–µ, —Ñ–∏–Ω–∞–Ω—Å—ã. " +
                    "–ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º. –û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.";

            String response = yandexGptService.generateResponse(prompt);
            sendMessageWithInlineKeyboard(chatId,
                    "‚ú® –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è " + zodiacSign + ":\n\n" + response);

        } catch (Exception e) {
            sendMessageWithInlineKeyboard(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            e.printStackTrace();
        } finally {
            userStates.remove(chatId);
        }
    }

    private void handleRegularMessage(String message, long chatId) {
        try {
            SendMessage typingMessage = new SendMessage();
            typingMessage.setChatId(String.valueOf(chatId));
            typingMessage.setText("–î—É–º–∞—é...");
            execute(typingMessage);

            String response = yandexGptService.generateResponse(message);
            sendMessageWithInlineKeyboard(chatId, response);

        } catch (Exception e) {
            sendMessageWithInlineKeyboard(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            e.printStackTrace();
        }
    }

    private void sendMessageWithInlineKeyboard(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(createInlineKeyboard());

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private InlineKeyboardMarkup createInlineKeyboard() {
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        List<InlineKeyboardButton> rowInline1 = new ArrayList<>();
        InlineKeyboardButton newQuestionButton = new InlineKeyboardButton();
        newQuestionButton.setText("üéØ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å");
        newQuestionButton.setCallbackData(CALLBACK_NEW_QUESTION);

        InlineKeyboardButton generateImageButton = new InlineKeyboardButton();
        generateImageButton.setText("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É");
        generateImageButton.setCallbackData(CALLBACK_GENERATE_IMAGE);

        rowInline1.add(newQuestionButton);
        rowInline1.add(generateImageButton);

        List<InlineKeyboardButton> rowInline2 = new ArrayList<>();
        InlineKeyboardButton astrologyButton = new InlineKeyboardButton();
        astrologyButton.setText("üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑");
        astrologyButton.setCallbackData(CALLBACK_ASTROLOGY);

        rowInline2.add(astrologyButton);

        rowsInline.add(rowInline1);
        rowsInline.add(rowInline2);

        inlineKeyboardMarkup.setKeyboard(rowsInline);
        return inlineKeyboardMarkup;
    }
}