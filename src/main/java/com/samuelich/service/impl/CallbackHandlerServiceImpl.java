package com.samuelich.service.impl;

import com.samuelich.model.enums.CallbackType;
import com.samuelich.model.enums.UserState;
import com.samuelich.service.CallbackHandlerService;
import com.samuelich.service.KeyboardService;
import com.samuelich.service.MessageHandlerService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;

import java.util.Map;

@RequiredArgsConstructor
@Service
public class CallbackHandlerServiceImpl implements CallbackHandlerService {

    private final MessageHandlerService messageHandlerService;

    @Override
    public SendMessage handleCallback(Long chatId, String callbackData, Map<Long, UserState> userStates) {
        try {
            CallbackType callbackType = CallbackType.fromValue(callbackData);

            return switch (callbackType) {
                case NEW_QUESTION -> handleNewQuestion(chatId, userStates);
                case GENERATE_IMAGE -> handleGenerateImage(chatId, userStates);
                case ASTROLOGY -> handleAstrology(chatId, userStates);
                case SETTINGS -> handleSettings(chatId);
            };
        } catch (IllegalArgumentException e) {
            return messageHandlerService.createSimpleMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
        }
    }

    @Override
    public SendMessage handleNewQuestion(Long chatId, Map<Long, UserState> userStates) {
        userStates.put(chatId, UserState.DEFAULT);
        return messageHandlerService.createMessageWithKeyboard(chatId,
                "üéØ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.");
    }

    @Override
    public SendMessage handleGenerateImage(Long chatId, Map<Long, UserState> userStates) {
        userStates.put(chatId, UserState.AWAITING_IMAGE_PROMPT);
        return messageHandlerService.createSimpleMessage(chatId,
                "üñºÔ∏è –û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å. " +
                        "–ë—É–¥—å—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!");
    }

    @Override
    public SendMessage handleSettings(Long chatId) {
        return messageHandlerService.createMessageWithKeyboard(chatId,
                """
                        ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                        
                        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.""");
    }

    @Override
    public SendMessage handleAstrology(Long chatId, Map<Long, UserState> userStates) {
        userStates.put(chatId, UserState.AWAITING_ZODIAC_SIGN);
        return messageHandlerService.createSimpleMessage(chatId,
                "üîÆ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–≤–µ–Ω, –¢–µ–ª–µ—Ü, –ë–ª–∏–∑–Ω–µ—Ü—ã –∏ —Ç.–¥.), " +
                        "–∏ —è —Å–æ—Å—Ç–∞–≤–ª—é –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑!");
    }
}
