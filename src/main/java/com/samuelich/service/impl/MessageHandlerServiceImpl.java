package com.samuelich.service.impl;

import com.samuelich.model.UserAstroData;
import com.samuelich.model.enums.UserState;
import com.samuelich.service.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;

import java.io.InputStream;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@RequiredArgsConstructor
@Service
public class MessageHandlerServiceImpl implements MessageHandlerService {

    private final YandexGptService yandexGptService;
    private final KeyboardService keyboardService;
    private final ImageService imageService;
    private final AstrologyCalculationService astrologyService;

    private final Map<Long, UserAstroData> userAstroDataMap = new HashMap<>();

    @Override
    public SendMessage handleRegularMessage(String message, Long chatId) {
        String response = yandexGptService.generateResponse(message);
        return createMessageWithKeyboard(chatId, response);
    }

    @Override
    public SendMessage handleAstrologyRequest(Long chatId, String firstName, Map<Long, UserState> userStates) {
        UserAstroData userData = userAstroDataMap.get(chatId);
        if (userData == null) {
            userStates.put(chatId, UserState.DEFAULT);
            return createMessageWithKeyboard(chatId,
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start");
        }

        userStates.put(chatId, UserState.DEFAULT);

        return generateAstrologyReport(userData, chatId, firstName);
    }

    private SendMessage generateAstrologyReport(UserAstroData userData, Long chatId, String firstName) {
        try {
            String detailedPrompt = createAstrologyPrompt(userData);
            String response = yandexGptService.generateResponse(detailedPrompt);

            userAstroDataMap.remove(chatId);

            String finalReport = String.format(
                    "‚ú® *–í–∞—à –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ %s ‚ú®\n\n" +
                            "üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n" +
                            "‚Ä¢ ‚ôà –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: %s\n" +
                            "‚Ä¢ üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: %s\n" +
                            "‚Ä¢ ‚è∞ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: %s\n" +
                            "‚Ä¢ üìç –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: %s\n\n" +
                            "%s",
                    firstName,
                    userData.getZodiacSign(),
                    userData.getBirthDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    userData.getBirthTime().format(DateTimeFormatter.ofPattern("HH:mm")),
                    userData.getBirthPlace(),
                    response
            );

            return createMessageWithKeyboard(chatId, finalReport);

        } catch (Exception e) {
            log.error("Error generating astrology report", e);
            userAstroDataMap.remove(chatId);
            return createMessageWithKeyboard(chatId,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    @Override
    public SendMessage createMessageWithKeyboard(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(keyboardService.createMainKeyboard());
        return message;
    }

    @Override
    public SendMessage createSimpleMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        return message;
    }

    @Override
    public SendMessage handleUserMessage(String message, Long chatId, String firstName, Map<Long, UserState> userStates) {
        UserState userState = userStates.getOrDefault(chatId, UserState.DEFAULT);

        return switch (userState) {
            case AWAITING_IMAGE_PROMPT -> handleImagePrompt(chatId, userStates);
            case AWAITING_BIRTH_DATE -> handleBirthDateInput(message, chatId, userStates);
            case AWAITING_BIRTH_TIME -> handleBirthTimeInput(message, chatId, userStates);
            case AWAITING_BIRTH_PLACE -> handleBirthPlaceInput(message, chatId, userStates, firstName);
            default -> handleRegularMessage(message, chatId);
        };
    }

    private SendMessage handleImagePrompt(Long chatId, Map<Long, UserState> userStates) {
        userStates.put(chatId, UserState.DEFAULT);
        return createMessageWithKeyboard(chatId, "üñºÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...");
    }

    private SendMessage handleBirthDateInput(String message, Long chatId, Map<Long, UserState> userStates) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
            LocalDate birthDate = LocalDate.parse(message, formatter);

            if (birthDate.isAfter(LocalDate.now())) {
                return createSimpleMessage(chatId,
                        "‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:");
            }

            UserAstroData userData = new UserAstroData(chatId);
            userData.setBirthDate(birthDate);
            userAstroDataMap.put(chatId, userData);

            userStates.put(chatId, UserState.AWAITING_BIRTH_TIME);
            return createSimpleMessage(chatId,
                    "‚è∞ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è* (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):\n" +
                            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30\n\n" +
                            "–ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ '–Ω–µ –∑–Ω–∞—é'");

        } catch (DateTimeParseException e) {
            return createSimpleMessage(chatId,
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n" +
                            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.05.1990");
        }
    }

    private SendMessage handleBirthTimeInput(String message, Long chatId, Map<Long, UserState> userStates) {
        UserAstroData userData = userAstroDataMap.get(chatId);

        if ("–Ω–µ –∑–Ω–∞—é".equalsIgnoreCase(message)) {
            userData.setBirthTime(LocalTime.NOON);
        } else {
            try {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
                LocalTime birthTime = LocalTime.parse(message, formatter);
                userData.setBirthTime(birthTime);
            } catch (DateTimeParseException e) {
                return createSimpleMessage(chatId,
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:\n" +
                                "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30\n\n" +
                                "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–Ω–µ –∑–Ω–∞—é'");
            }
        }

        userStates.put(chatId, UserState.AWAITING_BIRTH_PLACE);
        return createSimpleMessage(chatId,
                "üìç –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ *–º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è* (–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞):\n" +
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞");
    }

    private SendMessage handleBirthPlaceInput(String message, Long chatId, Map<Long, UserState> userStates, String firstName) {
        UserAstroData userData = userAstroDataMap.get(chatId);
        userData.setBirthPlace(message);

        String zodiacSign = astrologyService.calculateZodiacSign(userData.getBirthDate());
        userData.setZodiacSign(zodiacSign);

        String preparationMessage = String.format(
                "‚ú® *–û—Ç–ª–∏—á–Ω–æ, %s! –°–æ–±–∏—Ä–∞—é –≤–∞—à—É –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É...\n\n" +
                        "üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n" +
                        "‚Ä¢ üìÖ –î–∞—Ç–∞: %s\n" +
                        "‚Ä¢ ‚è∞ –í—Ä–µ–º—è: %s\n" +
                        "‚Ä¢ üìç –ú–µ—Å—Ç–æ: %s\n" +
                        "‚Ä¢ ‚ôà –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: %s\n\n" +
                        "‚è≥ –°–æ—Å—Ç–∞–≤–ª—è—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑...",
                firstName,
                userData.getBirthDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                userData.getBirthTime().format(DateTimeFormatter.ofPattern("HH:mm")),
                userData.getBirthPlace(),
                zodiacSign
        );

        return createSimpleMessage(chatId, preparationMessage);
    }

    private String createAstrologyPrompt(UserAstroData userData) {
        String zodiacSign = userData.getZodiacSign();
        String planetaryInfluence = astrologyService.getPlanetaryInfluence(userData.getBirthDate());
        String element = astrologyService.getElement(zodiacSign);
        String zodiacSymbol = astrologyService.getZodiacSymbol(zodiacSign);

        return String.format(
                "–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n" +
                        "–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n" +
                        "- –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: %s %s (—Å—Ç–∏—Ö–∏—è %s)\n" +
                        "- –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: %s\n" +
                        "- –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: %s\n" +
                        "- –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: %s\n" +
                        "- –ü–ª–∞–Ω–µ—Ç–∞—Ä–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ: %s\n\n" +
                        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–≥–Ω–æ–∑—É:\n" +
                        "1. –î–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å—Ñ–µ—Ä–∞–º: –ª—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∫–∞—Ä—å–µ—Ä–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã, –∑–¥–æ—Ä–æ–≤—å–µ, –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç\n" +
                        "2. –£–∫–∞–∂–∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –∏ —Å–ª–æ–∂–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã\n" +
                        "3. –î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n" +
                        "4. –£–ø–æ–º–Ω–∏ –≤–ª–∏—è–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤\n" +
                        "5. –ë—É–¥—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º, –Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º\n" +
                        "6. –£—á–∏—Ç—ã–≤–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∑–Ω–∞–∫–∞ %s\n" +
                        "7. –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º\n\n" +
                        "–§–æ—Ä–º–∞—Ç: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏, –Ω–æ –±–µ–∑ markdown-—Ä–∞–∑–º–µ—Ç–∫–∏",
                zodiacSign, zodiacSymbol, element,
                userData.getBirthDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                userData.getBirthTime().format(DateTimeFormatter.ofPattern("HH:mm")),
                userData.getBirthPlace(),
                planetaryInfluence,
                zodiacSign.replaceAll("[‚ôà‚ôâ‚ôä‚ôã‚ôå‚ôç‚ôé‚ôè‚ôê‚ôë‚ôí‚ôì]", "").trim()
        );
    }

    @Override
    public SendPhoto handleImageGeneration(String message, Long chatId) {
        try {
            String imageBase64 = yandexGptService.generateImage(message);
            if (imageBase64 != null) {
                InputStream imageStream = imageService.processBase64Image(imageBase64);
                if (imageStream != null) {
                    return imageService.createImageMessage(chatId, imageStream, message);
                }
            }
            return null;
        } catch (Exception e) {
            return null;
        }
    }
}
